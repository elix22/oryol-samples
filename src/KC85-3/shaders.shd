//------------------------------------------------------------------------------
//  draw voxel mesh
//
@vs voxel_vs
uniform vsParams {
    mat4 mvp;
    mat4 model;
    vec4[6] normal_table;
    vec4[32] color_table;
    vec3 light_dir;
    float light_intensity;
    vec3 scale;
    vec3 translate;
    vec3 tex_translate;
};

in vec4 position;
in vec4 normal;
out vec3 color;

void main() {
    // manually extract position and normal into range 0..255
    vec4 p = position * 255.0;
    vec4 n = normal * 255.0;
    vec4 facedata = n.xyzw;

    vec3 offset = p.xzy;
    float amb_occ = p.w / 63.0;

    vec3 voxelspace_pos = offset * scale.xzy;

    int normal_index = int(mod(n.w / 4.0, 6.0));
    vec3 face_normal = (model * normal_table[normal_index]).xzy;
    float l = clamp(dot(face_normal, light_dir), 0.0, 1.0) + 0.4;
    int color_index = int(mod(facedata.z, 32.0));
    color = color_table[color_index].xyz * l * light_intensity * amb_occ;

    vec4 wp = vec4(voxelspace_pos + translate.xzy, 1.0);
    gl_Position = mvp * wp;
}
@end

@fs voxel_fs
in vec3 color;
out vec4 fragColor;
void main() {
    fragColor = vec4(color, 1.0);
}
@end

@program VoxelShader voxel_vs voxel_fs

//------------------------------------------------------------------------------
@vs emu_vs
uniform vsParams {
    mat4 mvp;
};
in vec4 position;
in vec2 texcoord0;
out vec2 uv;

void main() {
    gl_Position = mvp * position;
    uv = texcoord0;
}
@end

@fs emu_fs
uniform sampler2D irm;
in vec2 uv;
out vec4 fragColor;

void main() {
    fragColor = texture(irm, uv);
}
@end

@program EmuShader emu_vs emu_fs

//------------------------------------------------------------------------------
//  debugging helper shader
@vs dbg_vs
uniform vsParams {
    mat4 mvp;
    vec4 color;
};
in vec4 position;
out vec4 dbgColor;

void main() {
    gl_Position = mvp * position;
    dbgColor = color;
}
@end

@fs dbg_fs
in vec4 dbgColor;
out vec4 fragColor;
void main() {
    fragColor = dbgColor;
}
@end

@program DbgShader dbg_vs dbg_fs
